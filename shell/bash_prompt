#!/bin/bash

# bash_prompt


prompt_git() {
    local s=""
    local branchName=""

    # check if the current directory is in a git repository
    if [ $(git rev-parse --is-inside-work-tree &>/dev/null; printf "%s" $?) == 0 ]; then

        # check if the current directory is in .git before running git checks
        if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == "false" ]; then

            # ensure index is up to date
            git update-index --really-refresh  -q &>/dev/null

            # check for uncommitted changes in the index
            if ! $(git diff --quiet --ignore-submodules --cached); then
                s="$s+";
            fi

            # check for unstaged changes
            if ! $(git diff-files --quiet --ignore-submodules --); then
                s="$s!";
            fi

            # check for untracked files
            if [ -n "$(git ls-files --others --exclude-standard)" ]; then
                s="$s?";
            fi

            # check for stashed files
            if $(git rev-parse --verify refs/stash &>/dev/null); then
                s="$s$";
            fi

        fi

        # get the short symbolic ref
        # if HEAD isn't a symbolic ref, get the short SHA
        # otherwise, just give up
        branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
                      git rev-parse --short HEAD 2> /dev/null || \
                      printf "(unknown)")"

        [ -n "$s" ] && s=" [$s]"

        printf "$1($branchName)\033[1;35m$s"
    else
        return
    fi
}

set_prompts() {

    #   define colors
    C_DEFAULT="\[\033[m\]"
    C_WHITE="\[\033[1m\]"
    C_BLACK="\[\033[30m\]"
    C_RED="\[\033[31m\]"
    C_GREEN="\[\033[32m\]"
    C_YELLOW="\[\033[33m\]"
    C_BLUE="\[\033[34m\]"
    C_PURPLE="\[\033[35m\]"
    C_CYAN="\[\033[36m\]"
    C_LIGHTGRAY="\[\033[37m\]"
    C_DARKGRAY="\[\033[1;30m\]"
    C_LIGHTRED="\[\033[1;31m\]"
    C_LIGHTGREEN="\[\033[1;32m\]"
    C_LIGHTYELLOW="\[\033[1;33m\]"
    C_LIGHTBLUE="\[\033[1;34m\]"
    C_LIGHTPURPLE="\[\033[1;35m\]"
    C_LIGHTCYAN="\[\033[1;36m\]"
    C_BG_BLACK="\[\033[40m\]"
    C_BG_RED="\[\033[41m\]"
    C_BG_GREEN="\[\033[42m\]"
    C_BG_YELLOW="\[\033[43m\]"
    C_BG_BLUE="\[\033[44m\]"
    C_BG_PURPLE="\[\033[45m\]"
    C_BG_CYAN="\[\033[46m\]"
    C_BG_LIGHTGRAY="\[\033[47m\]"

    PS1="________________________________________________________________________________\n"
    PS1+="| $C_LIGHTGREEN\u"
    PS1+="$C_DARKGRAY@"
    PS1+="$C_BLUE\h "
    PS1+="$C_DARKGRAY: "
    PS1+="$C_LIGHTYELLOW\w "
    PS1+="$C_DARKGRAY"
    PS1+="$C_RED\$(prompt_git) "
    PS1+="$C_DARKGRAY\$$C_DEFAULT\n"
    PS1+="| => "


    export PS1
    export PS2="| => "

}


function _update_ps1() {
    PS1="$(~/.dotfiles/powerline-shell/powerline-shell.py $? 2> /dev/null)"
}

function set_powerline_promps(){

    if [ "$TERM" != "linux" ]; then
        PROMPT_COMMAND="_update_ps1; $PROMPT_COMMAND"
    fi
}

#set_prompts
set_powerline_promps

unset set_prompts
